/* DO NOT EDIT | Generated by gyro */

import RealmSwift
import Foundation

final class SearchItems: Object, Decodable {
  private enum Keys: String, CodingKey {
    case desc = "desc"
    case items = "items"

    }

  @objc dynamic var desc: String?
  let items = List<SearchItem>()




  convenience required init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: Keys.self)
    let desc = try? container.decode(String?.self, forKey: .desc)
    let items = try container.decode([SearchItem].self, forKey: .items)
    self.init(desc: desc, items: items)
  }

  convenience init(desc: String?, items: [SearchItem]) {
    self.init()
    self.desc = desc
    self.items.append(objectsIn: items)

  }
}
